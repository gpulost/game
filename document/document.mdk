# 场景:
1. GG需要和一些游戏做联运，所以需要有一个联运平台和联运sdk
2. 同时我们有很多重打包的游戏，对于这些游戏，我们会加入一些plugin(每个plugin会包含一些功能)，而这些功能的使用需要用户拥有不同的level,
   因此我们也作为一个CP(Content Provider)来接入GG联运平台发行这些游戏


# 解释

##CP
            Content Provider, 游戏开发商

##GGLY-Server
		    游戏联运平台, 联运平台和游戏开发商合作发行游戏，同一个游戏开发商可以和多家联运平台合作发行游戏，联运平台参提供账号系统，充值功能等功能，参入游戏收入分成

##CPServer 和 3rd-CPServer
		    1.游戏的发行方，为游戏提供数据支持，游戏内的各种逻辑，道具都是通过CPServer控制的
            2.在联运过程中，我们自己重打包的游戏也是以联运的方式发行，用以区分第三方游戏的CPServer，我们自己的叫做CPServer第三方的称为3rd-CPServer

##GGLY-SDK
           1. 联运的SDK，进行联运的游戏需要集成该SDK
           2. 该SDK和GGLY-Server交互
           3. 该SDK提供登录注册、购买道具等功能

<!--
##currency
            游戏中的货币(eg.),GGLY-SDK向GGLY-Server购买,消耗RMB或者GG平台的积分
-->

##commodity
            游戏中的商品，会有以下几种情况
            1. 自有重打包游戏的商品： eg. 无限金币，免内购，上帝模式
               这类商品是GGLY-SDK直接向GGLY-Server购买，由GGLY-Server扣除积分，并把购买结果通知CPServer的
               
            2. 第三方游戏的商品: eg. 裤子，魔法，10个金币，20个钻石,
              其中 裤子，魔法这类商品是游戏向3rd-CPServer购买，对于GGLY-Server完全透明
              10个金币，20个钻石这类商品是游戏集成的GGLY-SDK向GGLY-Server购买，然后GGLY-Server通知3rd-CPServer购买成功的，类似于游戏内货币充值行为

##plugin 

            1. 只是自有联运游戏才会有plugin的概念
            2. 每个游戏会包含多个plugin，每个plugin会有一些功能点，这些功能点就是商品(commodity)

##game
            和GGLY-Server进行联运的游戏，game中集成了GGLY-SDK

##game_id
	         对于自有game
                  game_id为，8位16进制的字符串,game_id已有，直接录入到CP系统中
            对于3rd-CP game
                  game_id为，9位16进制的字符串,以及其他形式的能够区分开自有游戏和联运游戏的方式，3rd-CP需要向GGLY-Server申请game_id

##game_token
          1. GGLY-SDK向GGLY-Server登录成功后获取的game_token,由GGLY-Server生成，用于Game获取到当前游戏用户的subid
          2. game_token有效期为5分钟，过期无效，需要重新申请
          3. game_token的验证需要考虑:
              a. 有效期
              b. game_id
              c. sub_user_id,
              d. ip
              e. device_info(optional)

##sub_user_id
		        GG账号在对应游戏中的id

##secert_key
            1.secert_key在GGLY-Server平台获取
            2.GGLY-Server向CPServer或3rd-CPServer通知商品购买时使用secert_key和其他业务数据作为参数hash生成签名，用于CPServer校验通知数据的真实性
            3.签名生成算法参考 GG平台联运接入文档 V1.0.0


# 数据举例
 表1. 重打包游戏的commodity数据示例

![QQ图片20160614123356]

[QQ图片20160614123356]: images/QQ-20160614123356.png "QQ图片20160614123356" { width:auto; max-width:90% }



  表2. 第三方联运游戏的commodity数据示例

![QQ图片20160614123512]

[QQ图片20160614123512]: images/QQ-20160614123512.png "QQ图片20160614123512" { width:auto; max-width:90% }



表数据说明:

1. 重打包游戏commodity目前只有GG积分购买的需求，现在的设计已经支持重打包游戏的commodity使用游戏对应的内部货币购买

3. 第三方游戏的**commodity数据详情**对GGLY-Server完全透明，GGLY-Server只需要(game_id, commodity_id, price_type, price)

4. 第三方游戏commodity购买是否支持GG积分，取决于联运的具体合作形式，GGLY-Server平台支持该功能

# 功能

##游戏上架，游戏商品录入

###自有联运游戏上架流程
![3.1.1 CPServer]

[3.1.1 CPServer]: images/3.1.1-CPServer.svg "3.1.1 CPServer" { width:auto; max-width:90% }




注：

   1. GGLY-Server需要提供录入game信息, 商品(commodity_id, price_type, price)的功能
   2. CPServer需要提供录入game，商品详情信息的功能
   3. 自有的game可以支持每个游戏secert_key和game_token校验地址相同或者每个不同，这个看具体业务需求


###第三方联运游戏上架流程
![3.1.2 3rd-CP]

[3.1.2 3rd-CP]: images/3.1.2-3rd-CP.svg "3.1.2 3rd-CP" { width:auto; max-width:90% }


注：

   1. 第三方游戏需要联运需要先申请game_id,同时GGLY平台为之分配secert_key, game_token验证地址

   2. GGLY-Server需要提供录入game信息, 商品(commodity_id, price_type, price)的功能


##注册(不区分CPServer和3rd-CPServer)
![3.2注册]

[3.2注册]: images/3.2-.svg "3.2注册" { width:auto; max-width:90% }

GGLY-SDK注册功能支持三种方式：

1. 手机号
2. 第三方QQ
3. 第三方weixin 


##登录(不区分CPServer和3rd-CPServer)
![3.3登录]

[3.3登录]: images/3.3-.svg "3.3登录" { width:auto; max-width:90% }



GGLY-SDK登录功能支持四种方式:

1. 手机号
2. 第三方QQ
3. 第三方weixin 
4. 老账号密码

说明:

  1. 步骤1的GGLY-Server处理需要考虑 <subid, game_id, device, ip>
  2. 步骤3,4的参数都要带上： <subid, game_id, device, ip>

##登录注册效果图
![QQ图片20160613171444]

[QQ图片20160613171444]: images/QQ-20160613171444.png "QQ图片20160613171444" { width:auto; max-width:50% }


##商品购买（不区分自有和3rd的联运游戏， GG积分支付或RMB支付流程不同）
1. GGLY-Server并不关心commodity详情，只关心(subid, game_id, commodity_id, price_type, price)
2. 并且完成购买后向CPServer或3rd-CPServer通知(subid, game_id, commodity_id)购买成功
3. CPServer或3rd-CPServer保存commodity的详细信息和游戏用户是否购买对应的商品信息

###GG积分购买commodity 自有联运游戏的commodity购买（目前只有的需求）
![3.5 商品购买（用GG积分支付）]

[3.5 商品购买（用GG积分支付）]: images/3.5-GG-.png "3.5 商品购买（用GG积分支付）" { width:auto; }


<!--
数据举例(自有联运游戏为例):

* 一款自有联运游戏(game_id:abcd123）的用户A(sub_user_id: user123)，购买commodity(commodity_id:1)，则发生以下行为:


1. GGLY-Server会扣除A的相应GG积分(根据录入的commodity数据扣除)
2. 同时GGLY-Server通知CPServer, user123, 购买(abcd123, 1)成功
3. CPServer更新user的commodity信息
-->

###RMB购买commodity
![3.6 商品购买（ RMB支付）]

[3.6 商品购买（ RMB支付）]: images/3.6-RMB-.png "3.6 商品购买（ RMB支付）" { width:auto; }

<!--

数据举例(以第三方联运游戏为例):


* 一款第三方联运游戏(game_id:xcdef5678）的用户A(sub_user_id: user123)，购买commodity(commodity_id:4)，则发生以下行为:


1. GGLY-Server会要求A支付 price_type: RMB, price: 10 (根据录入的commodity)

2. 1成功，同时GGLY-Server通知3rd-CPServer以下信息: user123, 购买commodity(xcdef5678, 4)成功

3. 3rd-CPServer收到2中的通知，更新user的信息，给user123增加10coins

4. 游戏向3rd-CPServer使用coins或钻石 买 裤字或刀枪 对GGLY-Server透明
-->








